import React, { useEffect, useState } from "react";
import { collection, getDocs } from "firebase/firestore";
import { db } from "../config/firebase";
import { DollarSign, FileDown, Search } from "lucide-react";
import { format, getYear, getMonth } from "date-fns";
import {
  Document,
  Page,
  Text,
  View,
  StyleSheet,
  PDFViewer,
  PDFDownloadLink,
} from "@react-pdf/renderer";

// Create styles for PDF
const styles = StyleSheet.create({
  page: {
    padding: 30,
  },
  title: {
    fontSize: 24,
    marginBottom: 20,
  },
  subtitle: {
    fontSize: 14,
    marginBottom: 20,
  },
  summarySection: {
    marginBottom: 30,
  },
  summaryTitle: {
    fontSize: 16,
    marginBottom: 10,
  },
  summaryRow: {
    flexDirection: "row",
    marginBottom: 5,
  },
  summaryLabel: {
    width: 120,
  },
  tableHeader: {
    flexDirection: "row",
    borderBottomWidth: 1,
    borderBottomColor: "#000",
    paddingBottom: 5,
    marginBottom: 10,
    backgroundColor: "#f3f4f6",
    padding: 8,
  },
  tableRow: {
    flexDirection: "row",
    borderBottomWidth: 1,
    borderBottomColor: "#eee",
    paddingVertical: 8,
  },
  col1: { width: "15%" },
  col2: { width: "20%" },
  col3: { width: "15%" },
  col4: { width: "15%" },
  col5: { width: "12%", textAlign: "right" },
  col6: { width: "12%", textAlign: "right" },
  col7: { width: "11%", textAlign: "right" },
  footer: {
    position: "absolute",
    bottom: 30,
    left: 30,
    right: 30,
    fontSize: 8,
    textAlign: "center",
  },
});

const calculateEarnings = (price, vendorCommission = 70) => {
  const vendorEarning = (price * vendorCommission) / 100;
  const adminEarning = price - vendorEarning;
  return { vendorEarning, adminEarning };
};

// PDF Document Component
const ServiceStatementPDF = ({ data, year, month }) => (
  <Document>
    <Page size="A4" style={styles.page}>
      <Text style={styles.title}>CarCare Service Statement</Text>
      <Text style={styles.subtitle}>
        Statement Period: {format(new Date(year, month, 1), "MMMM yyyy")}
      </Text>

      <View style={styles.summarySection}>
        <Text style={styles.summaryTitle}>Summary</Text>
        <View style={styles.summaryRow}>
          <Text style={styles.summaryLabel}>Total Revenue:</Text>
          <Text>${data.totalAmount.toFixed(2)}</Text>
        </View>
        <View style={styles.summaryRow}>
          <Text style={styles.summaryLabel}>Vendor Earnings:</Text>
          <Text>${data.vendorEarnings.toFixed(2)}</Text>
        </View>
        <View style={styles.summaryRow}>
          <Text style={styles.summaryLabel}>CarCare Earnings:</Text>
          <Text>${data.adminEarnings.toFixed(2)}</Text>
        </View>
      </View>

      <View style={styles.tableHeader}>
        <Text style={styles.col1}>Date</Text>
        <Text style={styles.col2}>Service</Text>
        <Text style={styles.col3}>Vehicle</Text>
        <Text style={styles.col4}>Area</Text>
        <Text style={styles.col5}>Total</Text>
        <Text style={styles.col6}>Vendor</Text>
        <Text style={styles.col7}>CarCare</Text>
      </View>

      {data.requests.map((request) => {
        const { vendorEarning, adminEarning } = calculateEarnings(
          request.price
        );
        return (
          <View key={request.id} style={styles.tableRow}>
            <Text style={styles.col1}>
              {format(request.createdAt.toDate(), "dd/MM/yy")}
            </Text>
            <Text style={styles.col2}>{request.serviceName}</Text>
            <Text style={styles.col3}>{request.vehicleNumber}</Text>
            <Text style={styles.col4}>{request.area}</Text>
            <Text style={styles.col5}>${request.price.toFixed(2)}</Text>
            <Text style={styles.col6}>${vendorEarning.toFixed(2)}</Text>
            <Text style={styles.col7}>${adminEarning.toFixed(2)}</Text>
          </View>
        );
      })}

      <Text style={styles.footer}>Generated by CarCare Service System</Text>
    </Page>
  </Document>
);

const ServiceReports = () => {
  const [serviceRequests, setServiceRequests] = useState([]);
  const [earningsData, setEarningsData] = useState({});
  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());
  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth());
  const [searchTerm, setSearchTerm] = useState("");

  useEffect(() => {
    const fetchServiceRequests = async () => {
      try {
        const querySnapshot = await getDocs(collection(db, "serviceRequests"));
        const requests = [];
        querySnapshot.forEach((doc) => {
          requests.push({ ...doc.data(), id: doc.id });
        });
        setServiceRequests(requests);
        organizeEarnings(requests);
      } catch (error) {
        console.error("Error fetching service requests:", error);
      }
    };

    fetchServiceRequests();
  }, []);

  const organizeEarnings = (requests) => {
    const earnings = {};

    requests.forEach((request) => {
      const date = request.createdAt.toDate();
      const year = getYear(date);
      const month = getMonth(date);
      const { vendorEarning, adminEarning } = calculateEarnings(request.price);

      if (!earnings[year]) {
        earnings[year] = {};
      }
      if (!earnings[year][month]) {
        earnings[year][month] = {
          totalAmount: 0,
          vendorEarnings: 0,
          adminEarnings: 0,
          requests: [],
        };
      }

      earnings[year][month].totalAmount += request.price;
      earnings[year][month].vendorEarnings += vendorEarning;
      earnings[year][month].adminEarnings += adminEarning;
      earnings[year][month].requests.push(request);
    });

    setEarningsData(earnings);
  };

  const years = Object.keys(earningsData)
    .map(Number)
    .sort((a, b) => b - a);
  const monthsData = earningsData[selectedYear]?.[selectedMonth];
  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  const generateUniqueKey = (request) => {
    return `${request.serviceId}-${request.vehicleNumber}-${request.createdAt
      .toDate()
      .getTime()}`;
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white rounded-lg shadow-lg overflow-hidden">
          {/* Header */}
          <div className="bg-blue-600 px-6 py-4">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold text-white">
                Service Statement
              </h1>
              <div className="flex items-center space-x-4">
                <select
                  value={selectedMonth}
                  onChange={(e) => setSelectedMonth(Number(e.target.value))}
                  className="rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-blue-600 sm:text-sm sm:leading-6"
                >
                  {months.map((month, index) => (
                    <option key={month} value={index}>
                      {month}
                    </option>
                  ))}
                </select>
                <select
                  value={selectedYear}
                  onChange={(e) => setSelectedYear(Number(e.target.value))}
                  className="rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-blue-600 sm:text-sm sm:leading-6"
                >
                  {years.map((year) => (
                    <option key={year} value={year}>
                      {year}
                    </option>
                  ))}
                </select>
                {monthsData && (
                  <PDFViewer width={"100%"} height={"650"}>
                    <ServiceStatementPDF
                      data={monthsData}
                      year={selectedYear}
                      month={selectedMonth}
                    />
                  </PDFViewer>
                )}
              </div>
            </div>
          </div>

          {/* Summary Cards */}
          {monthsData && (
            <div className="grid grid-cols-3 gap-6 p-6 bg-gray-50 border-b border-gray-200">
              <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-500">
                      Total Revenue
                    </p>
                    <p className="text-2xl font-semibold text-gray-900">
                      ${monthsData.totalAmount.toFixed(2)}
                    </p>
                  </div>
                  <DollarSign className="w-8 h-8 text-green-500" />
                </div>
              </div>
              <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-500">
                      Vendor Earnings
                    </p>
                    <p className="text-2xl font-semibold text-gray-900">
                      ${monthsData.vendorEarnings.toFixed(2)}
                    </p>
                  </div>
                  <DollarSign className="w-8 h-8 text-blue-500" />
                </div>
              </div>
              <div className="bg-white p-6 rounded-lg shadow-sm border border-gray-200">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-gray-500">
                      CarCare Earnings
                    </p>
                    <p className="text-2xl font-semibold text-gray-900">
                      ${monthsData.adminEarnings.toFixed(2)}
                    </p>
                  </div>
                  <DollarSign className="w-8 h-8 text-purple-500" />
                </div>
              </div>
            </div>
          )}

          {/* Search Bar */}
          <div className="p-6 bg-white border-b border-gray-200">
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                placeholder="Search by service name, vehicle number, or area..."
                className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
              />
            </div>
          </div>

          {/* Transactions Table */}
          {monthsData && (
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Date
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Service
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Vehicle
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Area
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Total Amount
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Vendor Earnings
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      CarCare Earnings
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {monthsData.requests
                    .filter(
                      (request) =>
                        searchTerm === "" ||
                        request.serviceName
                          .toLowerCase()
                          .includes(searchTerm.toLowerCase()) ||
                        request.vehicleNumber
                          .toLowerCase()
                          .includes(searchTerm.toLowerCase()) ||
                        request.area
                          .toLowerCase()
                          .includes(searchTerm.toLowerCase())
                    )
                    .map((request) => {
                      const { vendorEarning, adminEarning } = calculateEarnings(
                        request.price
                      );
                      return (
                        <tr
                          key={generateUniqueKey(request)}
                          className="hover:bg-gray-50"
                        >
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {format(request.createdAt.toDate(), "dd/MM/yyyy")}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {request.serviceName}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {request.vehicleNumber}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {request.area}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right">
                            ${request.price.toFixed(2)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-blue-600 text-right font-medium">
                            ${vendorEarning.toFixed(2)}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-purple-600 text-right font-medium">
                            ${adminEarning.toFixed(2)}
                          </td>
                        </tr>
                      );
                    })}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ServiceReports;
